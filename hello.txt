tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        hello.txt

nothing added to commit but untracked files present (use "git add" to track)

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git add hello.txt

tone@tone MINGW64 /e/Git_space/git_demo (master)
$

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   hello.txt


tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git rm --cached hello.txt
rm 'hello.txt'

tone@tone MINGW64 /e/Git_space/git_demo (master)
$

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        hello.txt

nothing added to commit but untracked files present (use "git add" to track)

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git add hello.txt

tone@tone MINGW64 /e/Git_space/git_demo (master)
$

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   hello.txt


tone@tone MINGW64 /e/Git_space/git_demo (master)
$

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git co
commit   config

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git commit -m "first commit" hello.txt
[master (root-commit) 216583b] first commit
 1 file changed, 1 insertion(+)
 create mode 100644 hello.txt

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git status
On branch master
nothing to commit, working tree clean

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git reflog
216583b (HEAD -> master) HEAD@{0}: commit (initial): first commit

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git log
commit 216583b0f96a5866d5ce46e88528d74ad969a64b (HEAD -> master)
Author: tone <2309728569@qq.com>
Date:   Fri Feb 9 20:38:33 2024 +0800

    first commit


tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git sta
stage    stash    status

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   hello.txt

no changes added to commit (use "git add" and/or "git commit -a")

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git add hello.txt

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git status hello.txt
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   hello.txt


tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git commit -m "second commit" hello.txt
[master 4af2187] second commit
 1 file changed, 95 insertions(+), 1 deletion(-)

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git staus
git: 'staus' is not a git command. See 'git --help'.

The most similar command is
        status

tone@tone MINGW64 /e/Git_space/git_demo (master)
$ git reflog
4af2187 (HEAD -> master) HEAD@{0}: commit: second commit
216583b HEAD@{1}: commit (initial): first commit

tone@tone MINGW64 /e/Git_space/git_demo (master)
1111111111111111111111111111111111111111111
